{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nimport * as Bluebird from 'bluebird';\nimport * as awaiter from 'cancelable-awaiter';\nimport {launch, LaunchedChrome} from 'chrome-launcher';\nimport * as CDP from 'chrome-remote-interface';\nimport * as tslib from 'tslib';\n\nimport * as CompletionTrigger from './CompletionTriggers';\nimport {CreateOptions} from './CreateOptions';\nimport {CreateResult} from './CreateResult';\n\ntry {\n    Bluebird.config({cancellation: true});\n} catch (err) {\n    // was already configured\n}\n\n(tslib as any).__awaiter = awaiter;\ntype BluePromise<T> = Bluebird.Promise<T>;\n\nconst DEFAULT_CHROME_FLAGS = [\n    '--disable-gpu',\n    '--headless',\n    '--hide-scrollbars',\n];\n\nenum ERROR_EVENT {\n    DISCONNECT = 'disconnect',\n}\n\nexport {CompletionTrigger, CreateOptions, CreateResult};\n\n/**\n * Generates a PDF from the given HTML string, launching Chrome as necessary.\n *\n * @export\n * @param {string} html the HTML string.\n * @param {Options} [options] the generation options.\n * @returns {Promise<CreateResult>} the generated PDF data.\n */\nexport async function create(html: string, options?: CreateOptions): Promise<CreateResult> {\n    const myOptions = Object.assign({}, options);\n    let chrome: LaunchedChrome;\n\n    if (!myOptions.host && !myOptions.port) {\n        chrome = await launchChrome(myOptions);\n    }\n\n    try {\n        const tab = await CDP.New(myOptions);\n        try {\n            return await generate(html, myOptions, tab);\n        } finally {\n            try {\n                await CDP.Close({...myOptions, id: tab.id});\n            } catch (err) {\n                //\n            }\n        }\n    } finally {\n        if (chrome) {\n            await chrome.kill();\n        }\n    }\n}\n\n/**\n * Connects to Chrome and generates a PDF from HTML or a URL.\n *\n * @param {string} html the HTML string or URL.\n * @param {CreateOptions} options the generation options.\n * @param {any} tab the tab to use.\n * @returns {BluePromise<CreateResult>} the generated PDF data.\n */\nasync function generate(html: string, options: CreateOptions, tab: any): BluePromise<CreateResult> {\n    const client = await CDP({...options, target: tab});\n\n    const promise = _generate(client, html, options);\n\n    if (options.errorHandler != null) {\n        client.on('error', options.errorHandler);\n    }\n\n    if (options.eventHandler != null) {\n        client.on('event', options.eventHandler);\n    }\n\n    client.once(ERROR_EVENT.DISCONNECT, () => {\n        options._canceled = ERROR_EVENT.DISCONNECT;\n        promise.cancel();\n    });\n\n    return await promise.finally(() => {\n        if (options._canceled != null) {\n            return Promise.reject('Chrome daemon ' + options._canceled);\n        }\n    });\n}\n\nasync function _generate(client: any, html: string, options: CreateOptions): BluePromise<CreateResult> {\n    try {\n        await beforeNavigate(options, client);\n        const {Page} = client;\n        if (/^(https?|file|data):/i.test(html)) {\n            await Promise.all([\n                Page.navigate({url: html}),\n                Page.loadEventFired(),\n            ]); // Resolve order varies\n        } else {\n            const {frameTree} = await Page.getResourceTree();\n            await Promise.all([\n                Page.setDocumentContent({html, frameId: frameTree.frame.id}),\n                Page.loadEventFired(),\n            ]); // Resolve order varies\n        }\n        await afterNavigate(options, client);\n        // https://chromedevtools.github.io/debugger-protocol-viewer/tot/Page/#method-printToPDF\n        const pdf = await Page.printToPDF(options.printOptions);\n        return new CreateResult(pdf.data);\n\n    } finally {\n        client.close();\n    }\n\n}\n\n/**\n * Code to execute before the page navigation.\n *\n * @param {CreateOptions} options the generation options.\n * @param {*} client the Chrome client.\n * @returns {Promise<void>} resolves if there we no errors or cancellations.\n */\nasync function beforeNavigate(options: CreateOptions, client: any): Promise<void> {\n    const {Network, Page, Runtime} = client;\n    if (options.clearCache) {\n        await Network.clearBrowserCache();\n    }\n    // Enable events to be used here, in generate(), or in afterNavigate().\n    await Promise.all([\n        Network.enable(),\n        Page.enable(),\n        Runtime.enable(),\n    ]);\n    if (options.runtimeConsoleHandler) {\n        Runtime.consoleAPICalled(options.runtimeConsoleHandler);\n    }\n    if (options.runtimeExceptionHandler) {\n        Runtime.exceptionThrown(options.runtimeExceptionHandler);\n    }\n    Network.requestWillBeSent((e) => {\n        options._mainRequestId = options._mainRequestId || e.requestId;\n    });\n    Network.loadingFailed((e) => {\n        if (e.requestId === options._mainRequestId) {\n            options._navigateFailed = true;\n        }\n    });\n    if (options.cookies) {\n        await Network.setCookies({cookies: options.cookies});\n    }\n}\n\n/**\n * Code to execute after the page navigation.\n *\n * @param {CreateOptions} options the generation options.\n * @param {*} client the Chrome client.\n * @returns {Promise<void>} resolves if there we no errors or cancellations.\n */\nasync function afterNavigate(options: CreateOptions, client: any): Promise<void> {\n    if (options.completionTrigger) {\n        const waitResult = await options.completionTrigger.wait(client);\n        if (waitResult && waitResult.exceptionDetails) {\n            throw new Error(waitResult.result.value);\n        }\n    }\n}\n\n/**\n * Launches Chrome with the specified options.\n *\n * @param {CreateOptions} options the options for Chrome.\n * @returns {Promise<LaunchedChrome>} The launched Chrome instance.\n */\nasync function launchChrome(options: CreateOptions): Promise<LaunchedChrome> {\n    const chrome = await launch({\n        port: options.port,\n        chromePath: options.chromePath,\n        chromeFlags: options.chromeFlags || DEFAULT_CHROME_FLAGS,\n    });\n    options.port = chrome.port;\n    return chrome;\n}\n"],"sourceRoot":"../.."}